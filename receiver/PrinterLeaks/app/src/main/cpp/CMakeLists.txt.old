# For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html

# Sets the minimum version of CMake required to build the native library.

cmake_minimum_required(VERSION 3.4.1)

enable_language(C)

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.

add_library( # Sets the name of the library.
             native-lib

             # Sets the library as a shared library.
             SHARED

             # Provides a relative path to your source file(s).
             main.c cs_add_ci.c cs_add_ri.c cs_amd_ci.c cs_amd_ri.c cs_chol_ci.c cs_chol_ri.c
        cs_cholsol_ci.c cs_cholsol_ri.c cs_compress_ci.c cs_compress_ri.c cs_counts_ci.c
        cs_counts_ri.c cs_cumsum_ci.c cs_cumsum_ri.c cs_dfs_ci.c cs_dfs_ri.c cs_dmperm_ci.c
        cs_dmperm_ri.c cs_droptol_ci.c cs_droptol_ri.c cs_dropzeros_ci.c cs_dropzeros_ri.c
        cs_dupl_ci.c cs_dupl_ri.c cs_entry_ci.c cs_entry_ri.c cs_ereach_ci.c cs_ereach_ri.c
        cs_etree_ci.c cs_etree_ri.c cs_fkeep_ci.c cs_fkeep_ri.c cs_gaxpy_ci.c cs_gaxpy_ri.c
        cs_happly_ci.c cs_happly_ri.c cs_house_ci.c cs_house_ri.c cs_ipvec_ci.c cs_ipvec_ri.c
        cs_leaf_ci.c cs_leaf_ri.c cs_load_ci.c cs_load_ri.c cs_lsolve_ci.c cs_lsolve_ri.c
        cs_ltsolve_ci.c cs_ltsolve_ri.c cs_lu_ci.c cs_lu_ri.c cs_lusol_ci.c cs_lusol_ri.c
        cs_malloc_ci.c cs_malloc_ri.c cs_maxtrans_ci.c cs_maxtrans_ri.c cs_multiply_ci.c
        cs_multiply_ri.c cs_norm_ci.c cs_norm_ri.c cs_operator_ci.c cs_operator_ri.c
        cs_permute_ci.c cs_permute_ri.c cs_pinv_ci.c cs_pinv_ri.c cs_post_ci.c cs_post_ri.c
        cs_print_ci.c cs_print_ri.c cs_pvec_ci.c cs_pvec_ri.c cs_qr_ci.c cs_qr_ri.c cs_qrsol_ci.c
        cs_qrsol_ri.c cs_randperm_ci.c cs_randperm_ri.c cs_reach_ci.c cs_reach_ri.c cs_scatter_ci.c
        cs_scatter_ri.c cs_scc_ci.c cs_scc_ri.c cs_schol_ci.c cs_schol_ri.c cs_spsolve_ci.c
        cs_spsolve_ri.c cs_sqr_ci.c cs_sqr_ri.c cs_symperm_ci.c cs_symperm_ri.c cs_tdfs_ci.c
        cs_tdfs_ri.c cs_transpose_ci.c cs_transpose_ri.c cs_updown_ci.c cs_updown_ri.c
        cs_usolve_ci.c cs_usolve_ri.c cs_util_ci.c cs_util_ri.c cs_utsolve_ci.c cs_utsolve_ri.c
        eml_setop.c envelope.c filter.c filtfilt.c findpeaks.c getPeaks.c getPeaks_data.c
        getPeaks_emxutil.c getPeaks_initialize.c getPeaks_terminate.c heapsort.c insertionsort.c
        introsort.c main.c makeCXSparseMatrix.c rtGetInf.c rtGetNaN.c rt_nonfinite.c
        solve_from_lu.c solve_from_qr.c sort.c sortIdx.c unpackCXStruct.c)


target_include_directories(native-lib PUBLIC /home/kiototeko/tareas/masterThesis/PrinterLeaks/app/src/main/cpp)
target_compile_definitions(native-lib PUBLIC -DCS_COMPLEX PUBLIC -DMODEL=getpeaks)

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
        log-lib

        # Specifies the name of the NDK library that
        # you want CMake to locate.
        log )

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.

target_link_libraries( # Specifies the target library.
        native-lib

        # Links the target library to the log library
        # included in the NDK.
        ${log-lib})